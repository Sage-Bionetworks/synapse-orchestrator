# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ga4ghtest.models.base_model_ import Model
from ga4ghtest.openapi import util


class Plugin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, version=None, api=None, recipe_class=None, recipe=None):  # noqa: E501
        """Plugin - a model defined in OpenAPI

        :param id: The id of this Plugin.  # noqa: E501
        :type id: str
        :param name: The name of this Plugin.  # noqa: E501
        :type name: str
        :param version: The version of this Plugin.  # noqa: E501
        :type version: str
        :param api: The api of this Plugin.  # noqa: E501
        :type api: str
        :param recipe_class: The recipe_class of this Plugin.  # noqa: E501
        :type recipe_class: str
        :param recipe: The recipe of this Plugin.  # noqa: E501
        :type recipe: object
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'version': str,
            'api': str,
            'recipe_class': str,
            'recipe': object
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'version': 'version',
            'api': 'api',
            'recipe_class': 'recipeClass',
            'recipe': 'recipe'
        }

        self._id = id
        self._name = name
        self._version = version
        self._api = api
        self._recipe_class = recipe_class
        self._recipe = recipe

    @classmethod
    def from_dict(cls, dikt) -> 'Plugin':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Plugin of this Plugin.  # noqa: E501
        :rtype: Plugin
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Plugin.


        :return: The id of this Plugin.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plugin.


        :param id: The id of this Plugin.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Plugin.


        :return: The name of this Plugin.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plugin.


        :param name: The name of this Plugin.
        :type name: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this Plugin.


        :return: The version of this Plugin.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Plugin.


        :param version: The version of this Plugin.
        :type version: str
        """

        self._version = version

    @property
    def api(self):
        """Gets the api of this Plugin.


        :return: The api of this Plugin.
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this Plugin.


        :param api: The api of this Plugin.
        :type api: str
        """
        allowed_values = ["WES", "TRS"]  # noqa: E501
        if api not in allowed_values:
            raise ValueError(
                "Invalid value for `api` ({0}), must be one of {1}"
                .format(api, allowed_values)
            )

        self._api = api

    @property
    def recipe_class(self):
        """Gets the recipe_class of this Plugin.


        :return: The recipe_class of this Plugin.
        :rtype: str
        """
        return self._recipe_class

    @recipe_class.setter
    def recipe_class(self, recipe_class):
        """Sets the recipe_class of this Plugin.


        :param recipe_class: The recipe_class of this Plugin.
        :type recipe_class: str
        """
        allowed_values = ["requestCheck"]  # noqa: E501
        if recipe_class not in allowed_values:
            raise ValueError(
                "Invalid value for `recipe_class` ({0}), must be one of {1}"
                .format(recipe_class, allowed_values)
            )

        self._recipe_class = recipe_class

    @property
    def recipe(self):
        """Gets the recipe of this Plugin.


        :return: The recipe of this Plugin.
        :rtype: object
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe):
        """Sets the recipe of this Plugin.


        :param recipe: The recipe of this Plugin.
        :type recipe: object
        """

        self._recipe = recipe
